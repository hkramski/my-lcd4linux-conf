#-----------------------------------------------------------------------------------------------------------------------------------
#ifdef MASTER
#
# $Id: lcd4linux.master.conf,v 1.86 2015/01/18 18:10:54 root Exp $ (by kramski@web.de)
#
# This is the multi-target, master configuration file for lcd4linux (http://ssl.bulix.org/projects/lcd4linux/)
# and hacked small, cheap digital photo frames (dpf).
#
# Run "gpp lcd4linux.master.conf > lcd4linux.conf" to get a usable target/layout specific configuration file.
#
# While the lcd4linux project seems to be asleep, there is still activity hacking AX206 dpfs, see
# - http://forum.doozan.com/list.php?9
# - http://sourceforge.net/projects/dpf-ax/
#
#endif
#define  TARGET CLOUDL
#define  DISPLAY DPF
#define  THEME_DEFAULT
#
# This is a configuration file for lcd4linux (http://ssl.bulix.org/projects/lcd4linux/)
# made from $Id: lcd4linux.master.conf,v 1.86 2015/01/18 18:10:54 root Exp $ (by kramski@web.de)
# to be used on TARGET, usually as /etc/lcd4linux.conf.
#
# For lcd4linux widgets see
# - http://ssl.bulix.org/projects/lcd4linux/wiki/Layout
#
# You can always override layouts or displays defined here with 
#    lcd4linux -F -c "Display='$DISPLAY'" -c "Layout='$LAYOUT'" 
# e.g.
#    lcd4linux -F -c "Display='XWindow'" -c "Layout='dudl'"
#
#-----------------------------------------------------------------------------------------------------------------------------------

#ifeq TARGET DUDL
Layout 'dudl'  # PC running LMDE
#define NETDEV eth0
#define HAS_DVB
#undef  HAS_WEBCAM
#define USE_SYSLOG
#undef  USE_TOP
#endif

#ifeq TARGET FREDL
Layout 'fredl' # Dockstar running Debian
#define NETDEV eth0
#define HAS_DVB
#define HAS_WEBCAM
#define USE_SYSLOG
#undef  USE_TOP
#endif

#ifeq TARGET BASTL
Layout 'bastl' # Dockstar running Debian
#define NETDEV wlan0
#undef  HAS_DVB
#define HAS_WEBCAM
#define USE_SYSLOG
#undef  USE_TOP
#endif

#ifeq TARGET CLOUDL
Layout 'cloudl' #  Banana Pi running Debian
#Layout 'ccccs'   # with CCCS logo
#define NETDEV eth0
#undef  HAS_DVB
#define HAS_WEBCAM
#define USE_SYSLOG
#undef  USE_TOP
#endif

#ifeq TARGET BANDL
Layout 'bandl' # Banana Pi running Debian
#Layout 'ccccs'   # with CCCS logo
#define NETDEV eth0
#undef  HAS_DVB
#undef  HAS_WEBCAM
#define USE_SYSLOG
#undef  USE_TOP
#endif


#-----------------------------------------------------------------------------------------------------------------------------------
# Global settings
#-----------------------------------------------------------------------------------------------------------------------------------

Display 'DISPLAY'

Variables {
    # timer ticks
    second 1000
    minute 60 * second
    
    # define some standard dimensions:
    linesize 53	# max line length, for status lines etc.
    width100 51	# full width after padding (border)
    width050 24 # 1/2 of full width
    width033 17	# 1/3 of full width
    width025 12	# 1/4 of full width
    width010  6	# 1/10 of full width

    # define some colors; see http://www.uize.com/examples/sortable-color-table.html
    # ToDo: use alpha channel
    # (lcd4linux doesn't like defining to many constants, be careful, don't uncomment all colors)
    # aliceblue	'f0f8ff'
    # antiquewhite	'faebd7'
    # aqua	'00ffff'
    # aquamarine	'7fffd4'
    # azure	'f0ffff'
    # beige	'f5f5dc'
    # bisque	'ffe4c4'
    black	'000000'
    # blanchedalmond	'ffebcd'
    # blue	'0000ff'
    # blueviolet	'8a2be2'
    # brown	'a52a2a'
    # burlywood	'deb887'
    # cadetblue	'5f9ea0'
    # chartreuse	'7fff00'
    # chocolate	'd2691e'
    # coral	'ff7f50'
    # cornflowerblue	'6495ed'
    # cornsilk	'fff8dc'
    # crimson	'dc143c'
    # cyan	'00ffff'
    # darkblue	'00008b'
    # darkcyan	'008b8b'
    # darkgoldenrod	'b8860b'
    # darkgray	'a9a9a9'
    # darkgreen	'006400'
    # darkgrey	'a9a9a9'
    # darkkhaki	'bdb76b'
    # darkmagenta	'8b008b'
    # darkolivegreen	'556b2f'
    # darkorange	'ff8c00'
    # darkorchid	'9932cc'
    # darkred	'8b0000'
    # darksalmon	'e9967a'
    # darkseagreen	'8fbc8f'
    # darkslateblue	'483d8b'
    darkslategray	'2f4f4f'
    # darkslategrey	'2f4f4f'
    # darkturquoise	'00ced1'
    # darkviolet	'9400d3'
    # deeppink	'ff1493'
    # deepskyblue	'00bfff'
    # dimgray	'696969'
    # dimgrey	'696969'
    # dodgerblue	'1e90ff'
    # firebrick	'b22222'
    # floralwhite	'fffaf0'
    # forestgreen	'228b22'
    # fuchsia	'ff00ff'
    # gainsboro	'dcdcdc'
    ghostwhite	'f8f8ff'
    # gold	'ffd700'
    # goldenrod	'daa520'
    # gray	'808080'
    # green	'008000'
    # greenyellow	'adff2f'
    # grey	'808080'
    # honeydew	'f0fff0'
    # hotpink	'ff69b4'
    # indianred	'cd5c5c'
    # indigo	'4b0082'
    # ivory	'fffff0'
    # khaki	'f0e68c'
    # lavender	'e6e6fa'
    # lavenderblush	'fff0f5'
    # lawngreen	'7cfc00'
    # lemonchiffon	'fffacd'
    # lightblue	'add8e6'
    # lightcoral	'f08080'
    # lightcyan	'e0ffff'
    # lightgoldenrodyellow	'fafad2'
    # lightgray	'd3d3d3'
    # lightgreen	'90ee90'
    # lightgrey	'd3d3d3'
    # lightpink	'ffb6c1'
    # lightsalmon	'ffa07a'
    # lightseagreen	'20b2aa'
    # lightskyblue	'87cefa'
    lightslategray	'778899'
    # lightslategrey	'778899'
    # lightsteelblue	'b0c4de'
    # lightyellow	'ffffe0'
    # lime	'00ff00'
    # limegreen	'32cd32'
    # linen	'faf0e6'
    # magenta	'ff00ff'
    # maroon	'800000'
    # mediumaquamarine	'66cdaa'
    # mediumblue	'0000cd'
    # mediumorchid	'ba55d3'
    # mediumpurple	'9370db'
    # mediumseagreen	'3cb371'
    # mediumslateblue	'7b68ee'
    # mediumspringgreen	'00fa9a'
    # mediumturquoise	'48d1cc'
    # mediumvioletred	'c71585'
    midnightblue	'191970'
    # mintcream	'f5fffa'
    # mistyrose	'ffe4e1'
    # moccasin	'ffe4b5'
    # navajowhite	'ffdead'
    # navy	'000080'
    # oldlace	'fdf5e6'
    # olive	'808000'
    # olivedrab	'6b8e23'
    # orange	'ffa500'
    # orangered	'ff4500'
    # orchid	'da70d6'
    # palegoldenrod	'eee8aa'
    # palegreen	'98fb98'
    # paleturquoise	'afeeee'
    # palevioletred	'db7093'
    # papayawhip	'ffefd5'
    # peachpuff	'ffdab9'
    # peru	'cd853f'
    # pink	'ffc0cb'
    # plum	'dda0dd'
    # powderblue	'b0e0e6'
    # purple	'800080'
    # red	'ff0000'
    # rosybrown	'bc8f8f'
    # royalblue	'4169e1'
    # saddlebrown	'8b4513'
    salmon	'fa8072'
    # sandybrown	'f4a460'
    # seagreen	'2e8b57'
    # seashell	'fff5ee'
    # sienna	'a0522d'
    # silver	'c0c0c0'
    # skyblue	'87ceeb'
    # slateblue	'6a5acd'
    # slategray	'708090'
    # slategrey	'708090'
    # snow	'fffafa'
    # springgreen	'00ff7f'
    # steelblue	'4682b4'
    # tan	'd2b48c'
    # teal	'008080'
    # thistle	'd8bfd8'
    tomato	'ff6347'
    # turquoise	'40e0d0'
    # violet	'ee82ee'
    # wheat	'f5deb3'
    white 'ffffff'
    # whitesmoke	'f5f5f5'
    yellow	'ffff00'
    # yellowgreen	'9acd32'

    transparent 'ffffff00'

#ifdef THEME_DEFAULT
    # standard colors (standard style):
    std_fg		ghostwhite
    std_bg		midnightblue
    std_fg_bar0		'72a8f9'
    std_fg_bar1		salmon
    std_bg_bar		darkslategray
    std_fg_inverse	darkslategray
    std_bg_inverse	ghostwhite
    std_fg_area		ghostwhite
    std_bg_area		darkslategray
    std_fg_debug	lightslategray
    std_bg_debug	midnightblue
#endif
#ifdef THEME_WEBCAM
    # standard colors (webcam style):
    std_fg		ghostwhite
    std_bg		'00000066'
    std_fg_bar0		'72a8f9ff'
    std_fg_bar1		'fa8072ff'
    std_bg_bar		'00000066'
    std_fg_inverse	darkslategray
    std_bg_inverse	ghostwhite
    std_fg_area		ghostwhite
    std_bg_area		'00000066'
    std_fg_debug	lightslategray
    std_bg_debug	'00000066'
#endif

    # To be set later by timers:
    SyslogMsg 'Dummy'
    TopMsg 'Dummy'
}

Display dpf {
    driver 'DPF'
    port 'usb0'
    font '6x8'
    orientation 0
    backlight 4
    foreground std_fg
    background std_bg
    basecolor std_bg
}

Display XWindow {
    driver 'X11'
    size '320x240'
    font '6x8'
    pixel '2+0'
    gap '0x0'
    foreground std_fg
    background std_bg
    basecolor std_bg
}

Display Image {
    driver 'Image'
    format 'PNG'
    size '320x240'
    font '6x8'
    pixel '2+0'
    gap '0x0'
    foreground std_fg
    background std_bg
    basecolor std_bg
}


#-----------------------------------------------------------------------------------------------------------------------------------
# Widgets
#-----------------------------------------------------------------------------------------------------------------------------------

Widget System {
    class 'Text'
#    expression uname('nodename') . ' -- ' . uname('machine') . ' -- ' . uname('release') 
    expression uname('nodename') . (netinfo::ipaddr('NETDEV') ? ' -- ' . netinfo::ipaddr('NETDEV')  : '')  . ' -- ' . uname('machine') . ' -- ' . uname('release') 
    width linesize
    align 'C'
    background std_bg_inverse
    foreground std_fg_inverse
}

Widget Time {
    class 'Text' 
    expression strftime('%a, %d.%m.%Y -- %H:%M:%S', time()) . ' -- Up: ' . uptime('%d days %H:%M:%S')
    width linesize   
    align 'C'
    update 1 * second
    background std_bg_inverse
    foreground std_fg_inverse
}

# Widget Heartbeat {
# doesn't work ???
#     class 'Icon'
#     speed 0.5 * second
#     Bitmap {
#         Row1 '.....|.....|.....|.....'
#         Row2 '.....|.....|.***.|.....'
#         Row3 '.....|.***.|*****|.***.'
#         Row4 '..*..|.***.|*****|.***.'
#         Row5 '.....|.***.|*****|.***.'
#         Row6 '.....|.....|.***.|.....'
#         Row7 '.....|.....|.....|.....'
#         Row8 '.....|.....|.....|.....'
#     }
# }

Widget Busy {
    class 'Text'
    expression proc_stat::cpu('busy', 1 * second)
    prefix 'Busy'
    postfix '%'
    width width050
    precision 1
    align 'R'
    update 1 * second
}

Widget BusyBar {
    class 'Bar'
    expression proc_stat::cpu('busy', 1 * second)
    expression2 proc_stat::cpu('system', 1 * second)
    length width050 
    direction 'E'
    update 1 * second
    background std_bg_bar
    barcolor0 std_fg_bar0
    barcolor1 std_fg_bar1
}

Widget Load {
    class 'Text'
#ifeq TARGET CLOUDL.OLD
    # Olimex A20 on Debian never gets below 1.0
    expression loadavg(1) - 1
    postfix loadavg(1) > 2.0 ? '!' : ''
#else
    expression loadavg(1)
    postfix loadavg(1) > 1.0 ? '!' : ''
#endif
    prefix 'Load'
    width width050
    precision 1
    align 'R'
    update 1 * second
}

Widget LoadBar {
    class 'Bar'
#ifeq TARGET CLOUDL.OLD
    # Olimex A20 on Debian never gets below 1.0
    expression loadavg(1) - 1
    expression2 loadavg(2) - 1
#else
    expression loadavg(1) - 1
    expression2 loadavg(2) - 1
#endif
    max 4.0
    length width050
    direction 'E'
    update 1 * second
    background std_bg_bar
    barcolor0 std_fg_bar0
    barcolor1 std_fg_bar1
}

Widget Disk {
    class 'Text'
    # disk.[rw]blk return blocks, we assume a blocksize of 512
    # to get the number in kB/s we would do blk*512/1024, which is blk/2
    # expression (proc_stat::disk('.*', 'rblk', 1 * second)+proc_stat::disk('.*', 'wblk', 1 * second))/2
    # with kernel 2.6, disk_io disappeared from /proc/stat but moved to /proc/diskstat
    # therefore you have to use another function called 'diskstats':
    expression (diskstats('sd[a-z]$', 'read_sectors', 1 * second) + diskstats('sd[a-z]$', 'write_sectors', 1 * second)) / 2 / 1024
    prefix 'Disk'
    postfix ' MB/s'
    width width050
    precision 1
    align 'R'
    update 1 * second
}

Widget DiskBar {
    class 'Bar'
    #expression  proc_stat::disk('.*', 'rblk', 1 * second)
    #expression2 proc_stat::disk('.*', 'wblk', 1 * second)
    # for kernel 2.6:
    expression  diskstats('sd[a-z]$', 'read_sectors',  1 * second) / 2 / 1024
    expression2 diskstats('sd[a-z]$', 'write_sectors', 1 * second) / 2 / 1024
    length width050
    direction 'E'
    update 1 * second
    background std_bg_bar
    barcolor0 std_fg_bar0
    barcolor1 std_fg_bar1
}


Widget Netdev {
    class 'Text'
    expression (netdev('NETDEV', 'Rx_bytes', 1 * second) + netdev('NETDEV', 'Tx_bytes', 1 * second)) * 8 / 1024 / 1024
    prefix 'NETDEV'
    postfix ' Mbit/s'
    width width050
    precision 1
    align 'R'
    update 1 * second    
}

Widget NetdevBar {
    class 'Bar'
    expression netdev('NETDEV', 'Rx_bytes', 1 * second) * 8 / 1024 / 1024
    expression2 netdev('NETDEV', 'Tx_bytes', 1 * second) * 8 / 1024 / 1024
    length width050
    direction 'E'
    update 1 * second
    background std_bg_bar
    barcolor0 std_fg_bar0
    barcolor1 std_fg_bar1
}

#ifeq NETDEV wlan0
Widget WiFi {
    class 'Text'
    expression wifi::level('wlan0')
    prefix 'WiFi Signal'
    postfix ' dB'
    width width050
    precision 1
    align 'R'
    update 1 * second 
}

Widget WiFiBar {
    class 'Bar'
    expression wifi::level('wlan0') + 100
    expression2 wifi::quality('wlan0')
    min 0
    max 100
    length width050
    direction 'E'
    update 1 * second
    background std_bg_bar
    barcolor0 std_fg_bar0
    barcolor1 std_fg_bar1
}
#endif

#ifdef HAS_DVB
Widget DVB {
    class 'Text'
    expression dvb('signal_strength') * 100
    prefix 'DVB Signal'
    postfix '%'
    width width050
    precision 1
    align 'R'
    update 1 * second 
}

Widget DVBBar {
    class 'Bar'
    expression dvb('signal_strength')
#    expression2 dvb('snr')
    expression2 dvb('ber')
    min 0
    max 1
    length width050
    direction 'E'
    update 1 * second
    background std_bg_bar
    barcolor0 std_fg_bar0
    barcolor1 std_fg_bar1
}
#endif

Widget MemoryTitle {
    class 'Text'
    expression 'Memory'
    width width050
    align 'L'
}

Widget MemoryTotal {
    class 'Text'
    expression meminfo('MemTotal') / 1024
    prefix ' Total '
    postfix ' MB'
    width width050
    precision 0
    align 'R'
}

Widget MemoryFree {
    class 'Text'
    expression (meminfo('MemFree') + meminfo('Cached')) / 1024
    prefix ' Free '
    postfix ' MB'
    width width050
    precision 0
    align 'R'
    update 1 * second    
}

Widget MemorySwapped {
    class 'Text'
    expression (meminfo('SwapTotal') - meminfo('SwapFree')) / 1024
    prefix ' Swap used '
    postfix ' MB'
    width width050
    precision 0
    align 'R'
    update 1 * second
}

Widget HDDTempTitle {
    class 'Text'
    expression 'Disk Temperature°C'
    width width050
    align 'L'
}

Widget HDDTemp1 { 
    class 'Text' 
    expression hddtemp('/dev/sda') 
    width width010
    precision 1 
    align 'R' 
    update 10 * second 
}

#ifeq TARGET DUDL
Widget HDDTemp2 { 
    class 'Text' 
    expression hddtemp('/dev/sdb') 
    width width010
    precision 1
    align 'R' 
    update 10 * second 
}

Widget HDDTemp3 { 
    class 'Text' 
    expression hddtemp('/dev/sdc') 
    width width010
    precision 1
    align 'R' 
    update 10 * second 
}

Widget HDDTemp4 { 
    class 'Text' 
    expression hddtemp('/dev/sdd') 
    width width010
    precision 1
    align 'R' 
    update 10 * second 
}
#endif

Widget Users { 
    class 'Text' 
    expression exec('/usr/bin/who | /usr/bin/wc -l', 10 * second) . ' User(s)'
    width width050
    align 'L'
    update 10 * second 
}

Widget FSSpaceTitle {
    class 'Text'
    expression 'Disk Space available'
    width width050
    align 'L'
}

Widget FSSpaceRoot {
    class 'Text' 
    expression statfs('/', 'bavail') * statfs('/', 'bsize') / 1024 / 1024 / 1024
    prefix ' /' 
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second  
}

Widget FSSpaceHome {
    class 'Text' 
    expression statfs('/home', 'bavail') * statfs('/home', 'bsize') / 1024 / 1024 / 1024
    prefix ' /home' 
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}

#ifeq TARGET DUDL
Widget FSSpaceBackup {
    class 'Text' 
    expression statfs('/backup/rsnapshot', 'bavail') * statfs('/backup/rsnapshot', 'bsize') / 1024 / 1024 / 1024
    prefix ' /backup/rsn '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}

Widget FSSpaceFilme {
    class 'Text' 
    expression statfs('/filme', 'bavail') * statfs('/filme', 'bsize') / 1024 / 1024 / 1024
    prefix ' /filme '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}

Widget FSSpaceMufu {
    class 'Text' 
    expression statfs('/mufu', 'bavail') * statfs('/mufu', 'bsize') / 1024 / 1024 / 1024
    prefix ' /mufu '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}
#endif

#ifeq TARGET FREDL
Widget FSSpaceUsb120gb {
    class 'Text' 
    expression statfs('/media/usb120gb', 'bavail') * statfs('/media/usb120gb', 'bsize') / 1024 / 1024 / 1024
    prefix ' /.../usb120gb '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}
#endif

#ifeq TARGET CLOUDL.OLD
Widget FSSpaceBackup {
    class 'Text' 
    expression statfs('/backup', 'bavail') * statfs('/backup', 'bsize') / 1024 / 1024 / 1024
    prefix ' /backup '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}
#endif

Widget FSSpaceData01 {
    class 'Text' 
    expression statfs('/data01', 'bavail') * statfs('/data01', 'bsize') / 1024 / 1024 / 1024
    prefix ' /data01 '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}

Widget FSSpaceVar {
    class 'Text' 
    expression statfs('/var', 'bavail') * statfs('/var', 'bsize') / 1024 / 1024 / 1024
    prefix ' /var '
    postfix ' GB'
    width width050
    precision 2
    align 'R' 
    update 10 * second 
}

Widget ServicesTitle {
    class 'Text'
    expression 'Services'
    width width100
    align 'C'
    background std_bg_inverse
    foreground std_fg_inverse
}

#ifeq TARGET DUDL
Widget ApacheStatus {
    class 'Text'
    expression 'Apache '
    width width050  
    postfix exec('/usr/local/bin/mystatus apache2', 10 * second)
    update 10 * second  
}
#endif

Widget BindDNSStatus {
    class 'Text'
    expression 'Bind DNS '
    width width050  
    postfix exec('/usr/local/bin/mystatus bind9', 10 * second)
    update 10 * second  
}

Widget DDClientStatus {
    class 'Text'
    expression 'DDClient '
    width width050  
    postfix exec('/usr/local/bin/mystatus ddclient', 10 * second)
    update 10 * second 
}

Widget DHCPStatus {
    class 'Text'
    expression 'DHCP '
    width width050  
    postfix exec('/usr/local/bin/mystatus isc-dhcp-server', 10 * second)
    update 10 * second 
}

Widget IWatchStatus {
    class 'Text'
    expression 'IWatch '
    width width050  
    postfix exec('/usr/local/bin/mystatus iwatch', 10 * second)
    update 10 * second  
}

Widget LLTDStatus {
    class 'Text'
    expression 'LLTD Responder '
    width width050  
    postfix exec('/usr/local/bin/mystatus lld2d', 10 * second)
    update 10 * second  
}

#ifneq TARGET DUDL
Widget LighttpdStatus {
    class 'Text'
    expression 'Lighttpd '
    width width050  
    postfix exec('/usr/local/bin/mystatus lighttpd', 10 * second)
    update 10 * second  
}
#endif

Widget MiniDLNAStatus {
    class 'Text'
    expression 'MiniDLNA '
    width width050  
    postfix exec('/usr/local/bin/mystatus minidlna', 10 * second)
    update 10 * second  
}

Widget MotionStatus {
    class 'Text'
    expression 'Motion '
    width width050  
    postfix exec('/usr/local/bin/mystatus motion', 10 * second)
    update 10 * second  
}

Widget MySQLStatus {
    class 'Text'
    expression 'MySQL '
    width width050  
    postfix exec('/usr/local/bin/mystatus mysql', 10 * second)
    update 10 * second  
}

Widget MythTVStatus {
    class 'Text'
    expression 'MythTV Backend '
    width width050  
    postfix exec('/usr/local/bin/mystatus mythtv-backend', 10 * second)
    update 10 * second 
}

Widget OpenVPNStatus {
    class 'Text'
    expression 'OpenVPN '
    width width050  
    postfix exec('/usr/local/bin/mystatus openvpn', 10 * second)
    update 10 * second  
}

Widget PostfixStatus {
    class 'Text'
    expression 'Postfix '
    width width050  
    postfix exec('/usr/local/bin/mystatus postfix', 10 * second)
    update 10 * second  
}

Widget ProFTPStatus {
    class 'Text'
    expression 'ProFTP '
    width width050  
    postfix exec('/usr/local/bin/mystatus proftpd', 10 * second)
    update 10 * second  
}

Widget PPTPDStatus {
    class 'Text'
    expression 'PPTPD '
    width width050  
    postfix exec('/usr/local/bin/mystatus pptpd', 10 * second)
    update 10 * second  
}

Widget SambaStatus {
    class 'Text'
    expression 'Samba '
    width width050  
    postfix exec('/usr/local/bin/mystatus smbd', 10 * second)
    update 10 * second  
}

Widget SambaStatusDS {
    class 'Text'
    expression 'Samba '
    width width050  
    postfix exec('/usr/local/bin/mystatus samba', 10 * second)
    update 10 * second  
}

Widget SSHStatus {
    class 'Text'
    expression 'SSH (' . exec('/usr/bin/who | /usr/bin/wc -l', 10 * second) . ' Users)'
    width width050  
    postfix exec('/usr/local/bin/mystatus ssh', 10 * second)
    update 10 * second  
}

#ifeq TARGET DUDL.OLD
Widget SWRAIDStatus {
    class 'Text'
    expression 'SW RAID '
    width width050  
    postfix strstr(exec('cat /proc/mdstat', 10 * second), '[UUU]') > 0 ? 'up' : 'attention!'
    update 10 * second  
}

Widget TwonkyStatus {
    class 'Text'
    expression 'Twonkymedia '
    width width050  
    postfix exec('/usr/local/bin/mystatus twonkymedia', 10 * second)
    update 10 * second  
}
#endif

#ifdef HAS_WEBCAM
Widget WebcamStatus {
    class 'Text'
    expression 'Webcam '
    width width050  
    postfix exec('/usr/local/bin/mystatus webcam', 10 * second)
    update 10 * second  
}
#endif

Widget WebminStatus {
    class 'Text'
    expression 'Webmin '
    width width050  
    postfix exec('/usr/local/bin/mystatus webmin', 10 * second)
    update 10 * second  
}

#ifdef USE_SYSLOG
# the Syslog widgets may increase system load
Widget SyslogTitle {
    class 'Text'
    expression '/var/log/syslog'
    width width100
    align 'C'
    foreground std_fg_inverse
    background std_bg_inverse
}

Widget SetSyslogMsg {
    class 'Timer'
    expression SyslogMsg = exec('tail -n 1 /var/log/syslog', 4 * second)
    active 1
    update 4 * second  
}

Widget Syslog1 {
    class 'Text'
    expression substr(SyslogMsg, 0 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}

Widget Syslog2 {
    class 'Text'
    expression substr(SyslogMsg, 1 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}

Widget Syslog3 {
    class 'Text'
    expression substr(SyslogMsg, 2 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}

Widget Syslog4 {
    class 'Text'
    expression substr(SyslogMsg, 3 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}
#endif

#ifdef USE_TOP
# the top widgets may increase system load
Widget TopTitle {
    class 'Text'
    expression 'USER       PID %CPU    VSZ     TIME COMMAND'
    width width100
    align 'L'
    background std_bg_inverse
    foreground std_fg_inverse
}

Widget SetTopMsg {
    class 'Timer'
    # ps output must be exactly with100 (51) characters wide, including \n
    # (the last field 's' ensures there are no shorter lines).
    # /bin/ps -e -o "user:8,pid:5,pcpu:4,vsize:6,cputime:8,comm:12,s:1" --cols 51 --sort -pcpu
    # mysql     1218  1.5 151696 00:03:26 mysqld       S
    expression TopMsg = exec('/bin/ps -e -o "user:8,pid:5,pcpu:4,vsize:6,cputime:8,comm:' . (width100 - 39) . ',s:1" --cols ' . width100 . ' --sort -pcpu | /usr/bin/tail -n"+2"  | /usr/bin/head -4', 4 * second)
    active 1
    update 4 * second  
}

Widget Top1 {
    class 'Text'
    expression substr(TopMsg, 0 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}

Widget Top2 {
    class 'Text'
    expression substr(TopMsg, 1 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}

Widget Top3 {
    class 'Text'
    expression substr(TopMsg, 2 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}

Widget Top4 {
    class 'Text'
    expression substr(TopMsg, 3 * width100, width100)
    width width100
    align 'L'
    foreground std_fg_area
    background std_bg_area
    update 4 * second  
}
#endif

Widget Debug {
    class 'Text'
    # expression cfg('Layout')
    expression '$Revision: 1.86 $ -- DPF Driver by hackfin/superelchi'
    width linesize   
    align 'C'
    foreground std_fg_debug
    background std_bg_debug
}

Widget na {
    class 'Text'
    expression 'n/a'
    width 3   
    align 'L'
}

Widget Bgnd {
    class 'Image'
    file '/usr/local/share/backgrounds/mythbuntu-320x240.png'
    reload 0
    inverted 0
    visible 1
}

Widget BgndDS {
    class 'Image'
    file '/usr/local/share/backgrounds/dockstar-320x240.png'
    reload 0
    inverted 0
    visible 1
}

#ifdef HAS_WEBCAM
Widget SetWebcamImg {
    class 'Timer'
    expression exec('/usr/bin/curl http://localhost:8083?action=snapshot 2> /dev/null | /usr/bin/convert jpg:- /tmp/webcam.png; echo ', 5 * second)
    active 1
    update 5 * second  
}

Widget Webcam {
    class 'Image'
    file '/tmp/webcam.png'
    reload 1
    update 5 * second
    inverted 0
    visible 1
}
#endif

Widget CCCSImg {
    class 'Image'
    file '/home/public/pictures/logo-klein.png'
    reload 0
    inverted 0
    visible 1
}


#-----------------------------------------------------------------------------------------------------------------------------------
# Layouts
#-----------------------------------------------------------------------------------------------------------------------------------

Layout dudl {
    Row01.Col01 'System'
    Row02.Col01 'Time'

#    Row03.Col52 'Heartbeat'

    Row04.Col02 'Busy'
    Row05.Col02 'BusyBar'

    Row07.Col02 'Load'
    Row08.Col02 'LoadBar'

    Row10.Col02 'Disk'
    Row11.Col02 'DiskBar'

    Row13.Col02 'Netdev'
    Row14.Col02 'NetdevBar'

    Row16.Col02 'DVB'
    Row17.Col02 'DVBBar'

    Row04.Col29 'MemoryTitle'
    Row05.Col29 'MemoryTotal'
    Row06.Col29 'MemoryFree'
    Row07.Col29 'MemorySwapped'

    Row09.Col29 'HDDTempTitle'
    Row10.Col29 'HDDTemp1'
    Row10.Col35 'HDDTemp2'
    Row10.Col41 'HDDTemp3'
    Row10.Col47 'HDDTemp4'

    Row12.Col29 'FSSpaceTitle'
    Row13.Col29 'FSSpaceRoot'
    Row14.Col29 'FSSpaceHome'
    Row15.Col29 'FSSpaceBackup'
    Row16.Col29 'FSSpaceFilme'
    Row17.Col29 'FSSpaceMufu'

    Row19.Col02 'ServicesTitle'
    Row20.Col02 'ApacheStatus'
    Row21.Col02 'MySQLStatus'
    Row22.Col02 'LLTDStatus'
    Row23.Col02 'MiniDLNAStatus'
    Row24.Col02 'MythTVStatus' 
    Row20.Col29 'PostfixStatus'
    Row21.Col29 'SambaStatus' 
    Row22.Col29 'SSHStatus'  
    Row23.Col29 'WebminStatus'
#    Row24.Col29 'Users'  

#ifdef USE_TOP
    Row25.Col02 'TopTitle'
    Row26.Col02 'Top1'
    Row27.Col02 'Top2'
    Row28.Col02 'Top3'
    Row29.Col02 'Top4'
#endif
#ifdef USE_SYSLOG
    Row26.Col02 'SyslogTitle'
    Row27.Col02 'Syslog1'
    Row28.Col02 'Syslog2'
    Row29.Col02 'Syslog3'
#   Row29.Col02 'Syslog4'
#endif

    Row30.Col01 'Debug'

#ifdef USE_SYSLOG
    Timer1 'SetSyslogMsg'
#endif
#ifdef USE_TOP
    Timer2 'SetTopMsg'
#endif

#    Layer 2 {
#        X1.Y1 'Bgnd'
#    }

}

Layout fredl {
    Row01.Col01 'System'
    Row02.Col01 'Time'

#    Row03.Col52 'Heartbeat'

    Row04.Col02 'Busy'
    Row05.Col02 'BusyBar'

    Row07.Col02 'Load'
    Row08.Col02 'LoadBar'

    Row10.Col02 'Disk'
    Row11.Col02 'DiskBar'

    Row13.Col02 'Netdev'
    Row14.Col02 'NetdevBar'

    Row04.Col29 'MemoryTitle'
    Row05.Col29 'MemoryTotal'
    Row06.Col29 'MemoryFree'
    Row07.Col29 'MemorySwapped'

#    Row09.Col29 'HDDTempTitle'
#    Row10.Col29 'na'

    Row09.Col29 'Users'

    Row11.Col29 'FSSpaceTitle'
    Row12.Col29 'FSSpaceRoot'
    Row13.Col29 'FSSpaceUsb120gb'

    Row16.Col02 'ServicesTitle'
    Row17.Col02 'BindDNSStatus'
    Row18.Col02 'DDClientStatus'
    Row19.Col02 'DHCPStatus'
    Row20.Col02 'IWatchStatus'
    Row21.Col02 'LighttpdStatus'
    Row22.Col02 'LLTDStatus'
    Row23.Col02 'MiniDLNAStatus'

    Row17.Col29 'MotionStatus'
    Row18.Col29 'PostfixStatus'
    Row19.Col29 'PPTPDStatus'
    Row20.Col29 'SambaStatusDS'
    Row21.Col29 'SSHStatus'
#ifdef HAS_WEBCAM
    Row22.Col29 'WebcamStatus'
#endif
    Row23.Col29 'WebminStatus'

#ifdef USE_TOP
    Row25.Col02 'TopTitle'
    Row26.Col02 'Top1'
    Row27.Col02 'Top2'
    Row28.Col02 'Top3'
    Row29.Col02 'Top4'
#endif
#ifdef USE_SYSLOG
    Row25.Col02 'SyslogTitle'
    Row26.Col02 'Syslog1'
    Row27.Col02 'Syslog2'
    Row28.Col02 'Syslog3'
    Row29.Col02 'Syslog4'
#endif

    Row30.Col01 'Debug'

#ifdef USE_SYSLOG
    Timer1 'SetSyslogMsg'
#endif
#ifdef USE_TOP
    Timer2 'SetTopMsg'
#endif

#    Timer2 'SetWebcamImg'
#    Layer 2 {
#        X1.Y1 'Webcam'
#    }


#    Layer 2 {
#        X1.Y1 'BgndDS'
#    }

}

Layout bastl {
    Row01.Col01 'System'
    Row02.Col01 'Time'

    Row26.Col02 'Busy'
    Row27.Col02 'BusyBar'
    Row28.Col02 'Load'
    Row29.Col02 'LoadBar'

#ifeq NETDEV wlan0
    Row26.Col28 'WiFi'
    Row27.Col28 'WiFiBar'
#endif
    Row28.Col28 'Netdev'
    Row29.Col28 'NetdevBar'

    # Row30.Col01 'Debug'

    Timer1 'SetWebcamImg'
    Layer 2 {
        X1.Y1 'Webcam'
    }

}

Layout cloudl {
    Row01.Col01 'System'
    Row02.Col01 'Time'

#    Row03.Col52 'Heartbeat'

    Row04.Col02 'Busy'
    Row05.Col02 'BusyBar'

    Row07.Col02 'Load'
    Row08.Col02 'LoadBar'

    Row10.Col02 'Disk'
    Row11.Col02 'DiskBar'

    Row13.Col02 'Netdev'
    Row14.Col02 'NetdevBar'

    Row04.Col29 'MemoryTitle'
    Row05.Col29 'MemoryTotal'
    Row06.Col29 'MemoryFree'
    Row07.Col29 'MemorySwapped'

#    Row09.Col29 'HDDTempTitle'
#    Row10.Col29 'na'

#    Row09.Col29 'Users'

    Row09.Col29 'FSSpaceTitle'
    Row10.Col29 'FSSpaceRoot'
#    Row11.Col29 'FSSpaceBackup'
    Row11.Col29 'FSSpaceHome'
    Row12.Col29 'FSSpaceVar'
    Row13.Col29 'FSSpaceData01'

    Row16.Col02 'ServicesTitle'
    Row17.Col02 'BindDNSStatus'
    Row18.Col02 'DDClientStatus'
    Row19.Col02 'DHCPStatus'
    Row20.Col02 'IWatchStatus'
    Row21.Col02 'LighttpdStatus'
    Row22.Col02 'MiniDLNAStatus' # 'LLTDStatus'
    Row23.Col02 'MotionStatus'

    Row17.Col29 'MySQLStatus'
    Row18.Col29 'OpenVPNStatus'
    Row19.Col29 'PostfixStatus'
    Row20.Col29 'SambaStatusDS'
    Row21.Col29 'SSHStatus'

#ifdef HAS_WEBCAM
    Row22.Col29 'WebcamStatus'
#endif
    Row23.Col29 'WebminStatus'

#ifdef USE_TOP
    Row25.Col02 'TopTitle'
    Row26.Col02 'Top1'
    Row27.Col02 'Top2'
    Row28.Col02 'Top3'
    Row29.Col02 'Top4'
#endif
#ifdef USE_SYSLOG
    Row25.Col02 'SyslogTitle'
    Row26.Col02 'Syslog1'
    Row27.Col02 'Syslog2'
    Row28.Col02 'Syslog3'
    Row29.Col02 'Syslog4'
#endif

    Row30.Col01 'Debug'


#ifdef USE_SYSLOG
    Timer1 'SetSyslogMsg'
#endif
#ifdef USE_TOP
    Timer2 'SetTopMsg'
#endif

#    Timer2 'SetWebcamImg'
#    Layer 2 {
#        X1.Y1 'Webcam'
#    }


#    Layer 2 {
#        X1.Y1 'BgndDS'
#    }

}

Layout cccs {
    Row01.Col01 'System'
    Row02.Col01 'Time'

    Row26.Col02 'Busy'
    Row27.Col02 'BusyBar'
    Row28.Col02 'Load'
    Row29.Col02 'LoadBar'

#ifeq NETDEV wlan0
    Row26.Col28 'WiFi'
    Row27.Col28 'WiFiBar'
#endif
    Row28.Col28 'Netdev'
    Row29.Col28 'NetdevBar'

    # Row30.Col01 'Debug'

    Layer 2 {
        X1.Y1 'CCCSImg'
    }

}

Layout bandl {
    Row01.Col01 'System'
    Row02.Col01 'Time'

#    Row03.Col52 'Heartbeat'

    Row04.Col02 'Busy'
    Row05.Col02 'BusyBar'

    Row07.Col02 'Load'
    Row08.Col02 'LoadBar'

    Row10.Col02 'Disk'
    Row11.Col02 'DiskBar'

    Row13.Col02 'Netdev'
    Row14.Col02 'NetdevBar'

    Row04.Col29 'MemoryTitle'
    Row05.Col29 'MemoryTotal'
    Row06.Col29 'MemoryFree'
    Row07.Col29 'MemorySwapped'

#    Row09.Col29 'HDDTempTitle'
#    Row10.Col29 'na'

#    Row09.Col29 'Users'

    Row09.Col29 'FSSpaceTitle'
    Row10.Col29 'FSSpaceRoot'
#    Row11.Col29 'FSSpaceBackup'
    Row12.Col29 'FSSpaceHome'
    Row13.Col29 'FSSpaceVar'
    Row14.Col29 'FSSpaceData01'

    Row16.Col02 'ServicesTitle'
    Row17.Col02 'BindDNSStatus'
    Row18.Col02 'DDClientStatus'
    Row19.Col02 'DHCPStatus'
    Row20.Col02 'IWatchStatus'
    Row21.Col02 'LighttpdStatus'
    Row22.Col02 'MiniDLNAStatus' # 'LLTDStatus'
    Row23.Col02 'MotionStatus'

    Row17.Col29 'MySQLStatus'
    Row18.Col29 'OpenVPNStatus'
    Row19.Col29 'PostfixStatus'
    Row20.Col29 'SambaStatusDS'
    Row21.Col29 'SSHStatus'

#ifdef HAS_WEBCAM
    Row22.Col29 'WebcamStatus'
#endif
    Row23.Col29 'WebminStatus'

#ifdef USE_TOP
    Row25.Col02 'TopTitle'
    Row26.Col02 'Top1'
    Row27.Col02 'Top2'
    Row28.Col02 'Top3'
    Row29.Col02 'Top4'
#endif
#ifdef USE_SYSLOG
    Row25.Col02 'SyslogTitle'
    Row26.Col02 'Syslog1'
    Row27.Col02 'Syslog2'
    Row28.Col02 'Syslog3'
    Row29.Col02 'Syslog4'
#endif

    Row30.Col01 'Debug'


#ifdef USE_SYSLOG
    Timer1 'SetSyslogMsg'
#endif
#ifdef USE_TOP
    Timer2 'SetTopMsg'
#endif

#    Timer2 'SetWebcamImg'
#    Layer 2 {
#        X1.Y1 'Webcam'
#    }


#    Layer 2 {
#        X1.Y1 'BgndDS'
#    }

}




